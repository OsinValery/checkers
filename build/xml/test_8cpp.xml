<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="test_8cpp" kind="file" language="C++">
    <compoundname>test.cpp</compoundname>
    <includes local="yes">catch.hpp</includes>
    <includes refid="lib_8hpp" local="yes">lib.hpp</includes>
    <includes refid="position_8hpp" local="yes">position.hpp</includes>
    <includes refid="searcher_8hpp" local="yes">searcher.hpp</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">chrono</includes>
    <includes local="no">random</includes>
    <incdepgraph>
      <node id="2">
        <label>catch.hpp</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="9">
        <label>random</label>
      </node>
      <node id="7">
        <label>searcher.hpp</label>
        <link refid="searcher_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="1">
        <label>src/test.cpp</label>
        <link refid="test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lib.hpp</label>
        <link refid="lib_8hpp_source"/>
      </node>
      <node id="8">
        <label>chrono</label>
      </node>
      <node id="4">
        <label>position.hpp</label>
        <link refid="position_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test_8cpp_1ac741f1fe3a0a55db4d187818a03e122e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string empty</definition>
        <argsstring></argsstring>
        <name>empty</name>
        <initializer>= &quot;._._._.__._._._.._._._.__._._._.._._._.__._._._.._._._.__._._._.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="10" column="13" bodyfile="src/test.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test_8cpp_1a5dce1f0f228772872f79eb3d574495ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gen_start</definition>
        <argsstring>()</argsstring>
        <name>gen_start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="12" column="13" bodyfile="src/test.cpp" bodystart="12" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a969b2a716624d20c671247cb2cf86562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int count_ways</definition>
        <argsstring>(std::vector&lt; int &gt; way, std::vector&lt; std::vector&lt; int &gt;&gt; found)</argsstring>
        <name>count_ways</name>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>way</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt;&gt;</type>
          <declname>found</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="16" column="5" bodyfile="src/test.cpp" bodystart="16" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a2d3a1ee83ad94c0cfc8c27595142ff20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool contains</definition>
        <argsstring>(std::vector&lt; int &gt; value, std::vector&lt; std::vector&lt; int &gt;&gt; list)</argsstring>
        <name>contains</name>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt;&gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="22" column="6" bodyfile="src/test.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a25aa539881a2693326c4818120661879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool contains_all</definition>
        <argsstring>(std::vector&lt; std::vector&lt; int &gt;&gt; found, std::vector&lt; std::vector&lt; int &gt;&gt; result)</argsstring>
        <name>contains_all</name>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt;&gt;</type>
          <declname>found</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt;&gt;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="27" column="6" bodyfile="src/test.cpp" bodystart="27" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a42c282d3d8143baf2c2f57f6c375515a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int len</definition>
        <argsstring>(std::vector&lt; std::vector&lt; int &gt;&gt; obj)</argsstring>
        <name>len</name>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt;&gt;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="43" column="5" bodyfile="src/test.cpp" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1adbe1bf63054e3ac8fd8a2547881cd8ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Something works&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Something works&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="63" column="1" bodyfile="src/test.cpp" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a36f9bb4daedf5d9eea8b7b171c7f2111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;small methoods&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;small methoods&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="65" column="1" bodyfile="src/test.cpp" bodystart="65" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1ad8a8360c32f31ca78e9898b2f4a016b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Moving-simple-taking&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Moving-simple-taking&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="80" column="1" bodyfile="src/test.cpp" bodystart="80" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a3def78727cc6a7b176985f6a8d36009c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Moving-simple-taking-2&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Moving-simple-taking-2&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="115" column="1" bodyfile="src/test.cpp" bodystart="115" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1af25894df70e10d145130799241d28de2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Moving-simple-not_tacking&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Moving-simple-not_tacking&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="153" column="1" bodyfile="src/test.cpp" bodystart="153" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a82428506f1c57b5346e2aaa34653c6bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Short game&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Short game&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="181" column="1" bodyfile="src/test.cpp" bodystart="181" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a8729e51b41a4fb164aa87c2ad109c012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Moving-queen&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Moving-queen&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="204" column="1" bodyfile="src/test.cpp" bodystart="204" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1accf01b57557b7957c131666629330374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;find all moves of simple figure&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;find all moves of simple figure&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="227" column="1" bodyfile="src/test.cpp" bodystart="227" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1ac585d2a24a1c2a3941948901e9f5c13b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;all moves of simple figure with taking&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;all moves of simple figure with taking&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="264" column="1" bodyfile="src/test.cpp" bodystart="264" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1ae8e1b4684ba5b16d2d3002130697fdd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;all moves of queen&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;all moves of queen&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="301" column="1" bodyfile="src/test.cpp" bodystart="301" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1af6651a8bef28cb9dc03e0af7ef06f0e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;all moves queen taking&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;all moves queen taking&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="335" column="1" bodyfile="src/test.cpp" bodystart="335" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a374c522153bc34823b3ad49fa34cf0a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Large queen moves&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Large queen moves&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="359" column="1" bodyfile="src/test.cpp" bodystart="359" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1ab09070080e9b370707191c10aeaaed92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Simple search&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Simple search&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="374" column="1" bodyfile="src/test.cpp" bodystart="374" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a2b8f230d235309d87dfa85978a10decf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Large search&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Large search&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="403" column="1" bodyfile="src/test.cpp" bodystart="403" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a315e397c3b26dd280a7acb789bea8021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Searcher&apos;s things&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Searcher&apos;s things&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="417" column="1" bodyfile="src/test.cpp" bodystart="417" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a6af970465f62767b778f8f2e60cf4eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;all moves mixed figures with taking&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;all moves mixed figures with taking&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="428" column="1" bodyfile="src/test.cpp" bodystart="428" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1af8a997172198f542f4725038ad9aa133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;all moves of queen with taking&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;all moves of queen with taking&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="449" column="1" bodyfile="src/test.cpp" bodystart="449" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1ad7f5be872d9ee3db4c654667ec16c0ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Short game with stupid player&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Short game with stupid player&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="467" column="1" bodyfile="src/test.cpp" bodystart="467" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a1aa97dd69b9d09f4c531414e155e5a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;search tree with h = 7&quot;)</argsstring>
        <name>TEST_CASE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.cpp" line="509" column="1" bodyfile="src/test.cpp" bodystart="509" bodyend="523"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;catch.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lib.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;position.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;searcher.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">std::string<sp/>empty<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._._._.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">std::string<sp/>gen_start(){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;w_w_w_w__w_w_w_ww_w_w_w__._._._.._._._.__b_b_b_bb_b_b_b__b_b_b_b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_ways(std::vector&lt;int&gt;<sp/>way,<sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>found){</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>el:found)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(el<sp/>==<sp/>way)<sp/>count<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>contains(std::vector&lt;int&gt;<sp/>value,<sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>list){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>el:list)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(el<sp/>==<sp/>value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>contains_all(std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>found,<sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>result){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>every<sp/>value<sp/>from<sp/>result<sp/>is<sp/>in<sp/>found<sp/>,1<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;int&gt;<sp/>way<sp/>:<sp/>result)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count_ways(way,<sp/>found)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>нет<sp/>лишних<sp/>путей<sp/>в<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>way:<sp/>found){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>contains(way,<sp/>result))</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len(std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>obj){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>el:obj)<sp/>count+=1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="comment">comments<sp/>about<sp/>board</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>.<sp/><sp/>-<sp/>empty<sp/>field</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/>_<sp/><sp/>-<sp/>never<sp/>can<sp/>visit<sp/>it</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>W<sp/><sp/>-<sp/>white<sp/>queen</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/>w<sp/><sp/>-<sp/>white<sp/>simple<sp/>figure</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>B<sp/><sp/>-<sp/>black<sp/>queen</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>b<sp/><sp/>-<sp/>black<sp/>simple</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">for<sp/>move_of</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/>0<sp/><sp/>-<sp/>white</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>1<sp/><sp/>-<sp/>black</highlight></codeline>
<codeline lineno="61"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Something<sp/>works&quot;</highlight><highlight class="normal">)<sp/>{<sp/>REQUIRE(not_random()<sp/>==<sp/>not_random());<sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;small<sp/>methoods&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(gen_start(),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>gen_start());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test2<sp/>=<sp/>test.<ref refid="class_position_1a83377e38d96f2aa837d08e386dab1ce7" kindref="member">copy</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>test2.board);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>test2.move_of);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({0,<sp/>2,<sp/>1,<sp/>3});</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test2.board<sp/>!=<sp/>test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test2.move_of<sp/>!=<sp/>test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Moving-simple-taking&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board<sp/>=<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._w_._.._._b_.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board2<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;w_._._.__b_._._.._._._.__._b_._.._._b_.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board3<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;._._._.__b_b_._.._._._.__b_._b_.._._._.__b_b_b_.w_._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._._._.._._._.__._._w_.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._._._.._._._.__._._._.._._._w__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result31<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.w_._._.__b_._._.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result32<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__b_b_._.._._._.__b_._b_.._._._w__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result33<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__b_b_._.._._._.__b_._b_.._w_._.__._b_b_.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({3,<sp/>3,<sp/>5,<sp/>5});</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>цвет<sp/>передан<sp/>чёрным</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board2,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({0,<sp/>0,<sp/>2,<sp/>2,<sp/>4,<sp/>4,<sp/>6,<sp/>6});</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result2);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board3,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({0,<sp/>6,<sp/>2,<sp/>4,<sp/>4,<sp/>6,<sp/>6,<sp/>4,<sp/>4,<sp/>2,<sp/>2,<sp/>0,<sp/>0,<sp/>2});</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result31);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>full<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board3,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({0,<sp/>6,<sp/>2,<sp/>4,<sp/>4,<sp/>6,<sp/>6,<sp/>4});</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result32);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board3,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({0,<sp/>6,<sp/>2,<sp/>4});</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result33);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Moving-simple-taking-2&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>black</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._._._.._._._.__._w_._.._b_._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._b_.._._b_w__w_._._.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board3<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__w_w_._.b_._._.__._._._.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board4<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._W_.._._._.__._w_._.._._._.__w_._._.b_._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._._._.._._b_.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._b_.__w_._._b._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result3<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._B_.__._._._.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result4<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._B__._._._.._._._.__._._._.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({2,<sp/>6,<sp/>4,<sp/>4});</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>рубить<sp/>назад</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board2,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({5,<sp/>1,<sp/>7,<sp/>3});</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result2);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>to<sp/>queen<sp/>by<sp/>the<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board3,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({0,<sp/>2,<sp/>2,<sp/>0,<sp/>4,<sp/>2});</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result3);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>long<sp/>way<sp/>to<sp/>queen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board4,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({0,<sp/>6,<sp/>2,<sp/>4,<sp/>4,<sp/>2,<sp/>6,<sp/>0});</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result4);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Moving-simple-not_tacking&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__w_._._.._._._.__._._._.._._._.__._._._.._._._.__b_._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._w_._.__._._._.._._._.__._._._.._._._.__b_._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._w_._.__._._._.._._._.__._._._.._b_._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board1,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({1,<sp/>1,<sp/>2,<sp/>2});</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result1);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({1,<sp/>7,<sp/>2,<sp/>6});</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result2);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(gen_start(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({0,2,<sp/>1,3});</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;w_w_w_w__w_w_w_w._w_w_w__w_._._.._._._.__b_b_b_bb_b_b_b__b_b_b_b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>queen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>board1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._b._._._.__._._._.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>result1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._B__._._._.._._._.__._._._.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board1,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({7,1,<sp/>6,<sp/>0});</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result1);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Short<sp/>game&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>moves<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,2,<sp/>3,3},</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{3,5,<sp/>4,4},</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{3,1,<sp/>4,2},</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,6,<sp/>3,5},</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,2,<sp/>5,3},</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{3,5,<sp/>2,4},</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>3,5,<sp/>1,3}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>game;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>game.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(gen_start(),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>move:moves){</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>game.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>(move);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>1<sp/>-<sp/>color;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(game.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>color);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;w_w_w_w__w_._w_ww_w_._w__w_w_._.._._._.__b_._b_bb_b_._b__b_b_b_b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(game.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Moving-queen&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test<sp/>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;._._._.__b_._._.._._._.__._._._.._._._.__._._._.._W_._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__b_._._.._._._.__._._W_.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({2,<sp/>6,<sp/>5,<sp/>3});</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._B_._.._._._.__._._._.._._._.__._._._.._._._.__._._._W&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._B_.__._._._.._._._.__._._._.._._._.__._._._.._._._.__._._._W&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({3,1,<sp/>4,0});</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>result);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({7,7,<sp/>0,0});</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;W_._B_.__._._._.._._._.__._._._.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(result<sp/>==<sp/>test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;find<sp/>all<sp/>moves<sp/>of<sp/>simple<sp/>figure&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(gen_start(),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>result<sp/>=<sp/>{{0,2,<sp/>1,3}};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>found<sp/>=<sp/>test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(0,2);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(found<sp/>==<sp/>result);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>gen_start());</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>{{6,2,<sp/>5,3},{6,<sp/>2,<sp/>7,<sp/>3}};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/>test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(6,2);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(contains_all(found,<sp/>result));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>gen_start());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>new<sp/>function<sp/>for<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>{<sp/>{6,<sp/>2,<sp/>7,<sp/>3},{6,2,<sp/>5,3}};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(contains_all(found,result));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>found.push_back({1,1,<sp/>2,2});</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(not<sp/>contains_all(found,result));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/>{{6,2,<sp/>5,3}};</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(not<sp/>contains_all(found,result));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>can&apos;t<sp/>move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(2,6)<sp/>==<sp/>result);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>gen_start());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._b_._.._._._.__._._w_.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>result1<sp/>=<sp/>{{3,3,<sp/>2,2},<sp/>{3,3,<sp/>4,2}};</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>result2<sp/>=<sp/>{{5,5,6,6},<sp/>{5,5,<sp/>4,6}};</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(contains_all(test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(3,3),<sp/>result1));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(contains_all(test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(5,5),<sp/>result2));</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;all<sp/>moves<sp/>of<sp/>simple<sp/>figure<sp/>with<sp/>taking&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._w_._.__b_._._.._._._.__b_._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>result<sp/>=<sp/>{{2,2,<sp/>0,4},<sp/>{2,2,3,3},<sp/>{2,2,<sp/>0,4,<sp/>2,6}};</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>found<sp/>=<sp/>test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(2,2);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(contains_all(found,<sp/>result));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__b_b_._.._._._.__b_b_._.._._._.__b_._._.w_._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,6,<sp/>1,7},</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,6,<sp/>2,4},</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,6,<sp/>2,4,<sp/>0,2},</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,6,<sp/>2,4,<sp/>0,2,<sp/>2,0},</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,6,<sp/>2,4,<sp/>0,2,<sp/>2,0,<sp/>4,2},</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,6,<sp/>2,4,<sp/>0,2,<sp/>2,0,<sp/>4,2,<sp/>2,4},</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,6,<sp/>2,4,<sp/>4,2},</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,6,<sp/>2,4,<sp/>4,2,<sp/>2,0},</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,6,<sp/>2,4,<sp/>4,2,<sp/>2,0,<sp/>0,2},</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,6,<sp/>2,4,<sp/>4,2,<sp/>2,0,<sp/>0,2,<sp/>2,4}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/>test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(0,6);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(contains_all(found,result));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>free<sp/>==<sp/>false,<sp/>figure<sp/>can<sp/>only<sp/>take<sp/>enemy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>board<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._w_.__._._._.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(4,2,</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/>result);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;all<sp/>moves<sp/>of<sp/>queen&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._._B_.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>result<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>6,4},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>7,5},</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>4,4},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>3,5},</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>2,6},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>7,1},</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>1,7},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>4,2},</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>3,1},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>2,0},</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>6,2}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(5,3);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(contains_all(found,result));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>board);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref>==0);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._W_.__._._._.._._._.__._._._.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,0,<sp/>3,1},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,0,<sp/>2,2},</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,0,<sp/>1,3},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,0,<sp/>0,4},</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,0,<sp/>5,1},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,0,<sp/>6,2},</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,0,<sp/>7,3}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/>test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(4,0);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(contains_all(found,result));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>board);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>use<sp/>the<sp/>result<sp/>in<sp/>future</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>(found[4]);</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;all<sp/>moves<sp/>queen<sp/>taking&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._w_.__w_._B_.._._w_.__._._._.._._w_.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>result<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>6,2},</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>7,1},</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>6,4},</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>7,5},</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>3,1},</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>2,0},</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>3,1,<sp/>0,4},</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>3,5},</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>3,5,<sp/>0,2},</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>3,5,<sp/>5,7},</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>2,6},</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,3,<sp/>1,7}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(5,3);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>board);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(contains_all(found,result));</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Large<sp/>queen<sp/>moves&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__w_._._.._w_w_w__._._B_.._w_w_w__._._._.._w_w_w__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(5,3);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double&gt;<sp/>elapsed_seconds<sp/>=<sp/>end<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>elapsed_seconds.count();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(time<sp/>&lt;<sp/>0.002);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>я<sp/>вручную<sp/>не<sp/>смог<sp/>все<sp/>варианты<sp/>найти,<sp/>я<sp/>тестирую<sp/>время</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>там<sp/>больше<sp/>40<sp/>вариантов</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>board);</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Simple<sp/>search&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_searcher" kindref="compound">Searcher</ref><sp/>analizer;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>board<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._._._.._._w_.__._._._.._._._b__b_._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>result<sp/>=<sp/>{1,<sp/>7,<sp/>2,<sp/>6};</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>analizer.<ref refid="class_searcher_1a8140f189be693ad99a65bdf7396c663f" kindref="member">find</ref>(test,3);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(found<sp/>==<sp/>result);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>board);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a4cd31918b9ea0bfe34d70ea172404138" kindref="member">move_of</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>taking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._._._.._._w_.__._._b_.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/>analizer.<ref refid="class_searcher_1a8140f189be693ad99a65bdf7396c663f" kindref="member">find</ref>(test,3);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>{5,5,<sp/>3,3};</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(result<sp/>==<sp/>found);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>board);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>queen<sp/>have<sp/>big<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>i<sp/>test,<sp/>that<sp/>searcher<sp/>prefer<sp/>take<sp/>and<sp/>vin,<sp/>not<sp/>transforming<sp/>to<sp/>queen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._b_._.._w_._.__._._._.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>{3,1,1,3};</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/>analizer.<ref refid="class_searcher_1a8140f189be693ad99a65bdf7396c663f" kindref="member">find</ref>(test,3);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(found<sp/>==<sp/>result);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Large<sp/>search&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_searcher" kindref="compound">Searcher</ref><sp/>analizer;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__w_._._.._w_w_w__._._B_.._w_w_w__._._._.._w_w_w__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>found<sp/>=<sp/>analizer.<ref refid="class_searcher_1a8140f189be693ad99a65bdf7396c663f" kindref="member">find</ref>(test,3);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double&gt;<sp/>elapsed_seconds<sp/>=<sp/>end<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>elapsed_seconds.count();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(time&lt;1);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>board);</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Searcher&apos;s<sp/>things&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_searcher" kindref="compound">Searcher</ref><sp/>analizer;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__w_._._.._w_w_w__._._B_.._w_w_w__._._._.._w_w_w__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(analizer.<ref refid="class_searcher_1ad62bfd90ecff5defb2ce8124a999e3dc" kindref="member">estimate_board</ref>(board,</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&lt;=<sp/>0);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>board);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._._._.._._w_.__._._._.._._._b__b_._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(analizer.<ref refid="class_searcher_1ad62bfd90ecff5defb2ce8124a999e3dc" kindref="member">estimate_board</ref>(board,</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;all<sp/>moves<sp/>mixed<sp/>figures<sp/>with<sp/>taking&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__w_._._.b_._._.__._._w_.._._._.__._._._.._._._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>result<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,2,2,0},</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,2,2,0,6,4},</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,2,2,0,7,5}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(contains_all(test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(0,2),<sp/>result));</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>board<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._._._.._._._b__w_._._.._b_._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,5,0,6},</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,5,<sp/>3,7},</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,5,<sp/>3,7,<sp/>7,3}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(contains_all(test.<ref refid="class_position_1a3fbc47142032476b8f5165507dd6034a" kindref="member">fig_moves</ref>(1,5),<sp/>result));</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;all<sp/>moves<sp/>of<sp/>queen<sp/>with<sp/>taking&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>test;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>board<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;._._._.__._._._.._._._.__._._._.W_._._b__._._._.._b_._.__._._._.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(board,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;<sp/>rezult<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,4,3,7,7,3},</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,4,3,7},</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,4,1,5},</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,4,1,3},</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,4,2,2},</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,4,3,1},</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,4,4,0}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<sp/>contains_all(test.<ref refid="class_position_1a6c7fb640229a1c494467a4a9b0d65bb7" kindref="member">all_moves</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),rezult));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(test.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref><sp/>==<sp/>board);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Short<sp/>game<sp/>with<sp/>stupid<sp/>player&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>position;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_searcher" kindref="compound">Searcher</ref><sp/>analizer;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>position.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(gen_start(),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>position.<ref refid="class_position_1a6c7fb640229a1c494467a4a9b0d65bb7" kindref="member">all_moves</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;10;i++){</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>position.<ref refid="class_position_1a6c7fb640229a1c494467a4a9b0d65bb7" kindref="member">all_moves</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>(found[0]);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>(analizer.<ref refid="class_searcher_1a8140f189be693ad99a65bdf7396c663f" kindref="member">find</ref>(position,5));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(analizer.<ref refid="class_searcher_1ad62bfd90ecff5defb2ce8124a999e3dc" kindref="member">estimate_board</ref>(position.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref>,</highlight><highlight class="keyword">false</highlight><highlight class="normal">)&gt;=0);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>random<sp/>move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>position.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(gen_start(),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>std::mt19937<sp/>gen(rd());<sp/><sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>dist(1,100);<sp/></highlight><highlight class="comment">//<sp/>distribute<sp/>results<sp/>between<sp/>1<sp/>and<sp/>6<sp/>inclusive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>dist(gen);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;10;i++){</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>choose<sp/>random</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>position.<ref refid="class_position_1a6c7fb640229a1c494467a4a9b0d65bb7" kindref="member">all_moves</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>len(found);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>dist(gen);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n&gt;d-1)<sp/>n<sp/>=<sp/>dist(gen);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>my<sp/>move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>(found[n]);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bot<sp/>move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>(analizer.<ref refid="class_searcher_1a8140f189be693ad99a65bdf7396c663f" kindref="member">find</ref>(position,5));</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(analizer.<ref refid="class_searcher_1ad62bfd90ecff5defb2ce8124a999e3dc" kindref="member">estimate_board</ref>(position.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref>,</highlight><highlight class="keyword">false</highlight><highlight class="normal">)&gt;=0);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;search<sp/>tree<sp/>with<sp/>h<sp/>=<sp/>7&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>H<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_position" kindref="compound">Position</ref><sp/>position;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>position.<ref refid="class_position_1a010eadccb7b73deed479b13ca6658d41" kindref="member">set_board</ref>(gen_start(),</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_searcher" kindref="compound">Searcher</ref><sp/>analizer;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>position.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>({2,2,3,3});</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>analizer.<ref refid="class_searcher_1a8140f189be693ad99a65bdf7396c663f" kindref="member">find</ref>(position,H);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double&gt;<sp/>elapsed_seconds<sp/>=<sp/>end<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>elapsed_seconds.count();</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(time&lt;2);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>position.<ref refid="class_position_1a4dc42f3d6a40d56c8aa6d6af6719a13c" kindref="member">move</ref>(found);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(analizer.<ref refid="class_searcher_1ad62bfd90ecff5defb2ce8124a999e3dc" kindref="member">estimate_board</ref>(position.<ref refid="class_position_1a9857183667d8c73b3fd9def4646f6588" kindref="member">board</ref>,</highlight><highlight class="keyword">false</highlight><highlight class="normal">)&gt;=0);</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/test.cpp"/>
  </compounddef>
</doxygen>
